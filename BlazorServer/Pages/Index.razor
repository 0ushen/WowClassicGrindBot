@page "/"

@inject Libs.WowData wowData
@inject Libs.GOAP.GoapAgent goapAgent
@inject Libs.BotController botController
@inject Libs.RouteInfo routeinfo
@inject IJSRuntime JSRuntime;

    <h3>Wowbot - Main</h3>

<BotHeader />

<div class="container-fluid">
    <div class="row">
        <div class="col-sm">
            <table class="table table-sm table-striped">
                @foreach (var action in goapAgent.AvailableActions)
                {
                    <GoapActionView action="action" IsSelected="(action == goapAgent.CurrentAction)" />
                }
            </table>
        </div>
        <div class="col-sm">
            <div id="grid">
                <svg width="602px" height="602px">
                    <g class="background">
                    </g>
                    <g class="group2">
                        @{
                            var colour = wowData.PlayerReader.PlayerBitValues.PlayerInCombat ? "red" : "orange";

                            if (goapAgent.CurrentAction?.GetType() == typeof(Libs.Actions.FollowRouteAction))
                            {
                                colour = "blue";
                            }

                            <circle cx="@routeinfo.ToCanvasPointX(wowData.PlayerReader.XCoord)" cy="@routeinfo.ToCanvasPointY(wowData.PlayerReader.YCoord)" r="4" fill="@colour" />
                        }

                        <g stroke-width="1" stroke="lightgray">
                            @this.SpiritLines
                        </g>
                        <g fill="gray">
                            @this.SpiritPathPoints
                        </g>

                        <g stroke-width="1" stroke="gray">
                            @this.PathLines
                        </g>
                        <g fill="black">
                            @this.PathPoints
                        </g>

                        <g fill="blue">
                            @((MarkupString)routeinfo.NextPoint())
                        </g>
                    </g>

                </svg>
            </div>
        </div>
    </div>
</div>
<table>
    <tr>
        <td width="100%">
        </td>
        <td>
        </td>
    </tr>
</table>


<button class="btn btn-primary" @onclick="ToggleBot">Toggle Bot</button>

<div id="tooltip" display="none" style="position: absolute; display: none;"></div>

@code {
    private MarkupString PathLines = new MarkupString();
    private MarkupString PathPoints = new MarkupString();


    private MarkupString SpiritLines = new MarkupString();
    private MarkupString SpiritPathPoints = new MarkupString();

    private bool CanvasInitialised = false;

    protected override void OnInitialized()
    {

        wowData.AddonDataChanged += (o, e) =>
        {
            if (!CanvasInitialised)
            {
                CanvasInitialised = true;
                routeinfo.SetMargin(20);
                routeinfo.SetCanvasSize(600);
                this.PathLines = new MarkupString(routeinfo.RenderPathLines(routeinfo.PathPoints));
                this.PathPoints = new MarkupString(routeinfo.RenderPathPoints(routeinfo.PathPoints));

                this.SpiritLines = new MarkupString(routeinfo.RenderPathLines(routeinfo.SpiritPath));
                this.SpiritPathPoints = new MarkupString(routeinfo.RenderPathPoints(routeinfo.SpiritPath));
            }

            base.InvokeAsync(() => { try { StateHasChanged(); } catch { } });
        };
    }

    protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await JSRuntime.InvokeAsync<string>("draw");
        }
    }

    private void ToggleBot()
    {
        botController.ToggleBotStatus();
    }
}

