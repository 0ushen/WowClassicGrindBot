@page "/"

@inject Libs.AddonReader addonReader
@inject Libs.BotController botController
@inject IJSRuntime JSRuntime;

<h3>Wowbot - Main</h3>

<BotHeader />

<div class="container-fluid">
    <div class="row">
        <div class="col-sm">
            <table class="table table-sm table-striped">
                @foreach (var action in botController.GoapAgent.AvailableActions)
                {
                    <GoapActionView action="action" IsSelected="(action == botController.GoapAgent.CurrentAction)" ShowKeys="true" />
                }
            </table>
        </div>
        <div class="col-sm">
            <div id="grid">
                <svg width="602px" height="602px">
                    <g class="background">
                    </g>
                    <g class="group2">
                        @{
                            var colour = addonReader.PlayerReader.PlayerBitValues.PlayerInCombat ? "red" : "orange";

                            if (botController.GoapAgent.CurrentAction?.GetType() == typeof(Libs.Actions.FollowRouteAction))
                            {
                                colour = "blue";
                            }

                            <circle cx="@botController.RouteInfo.ToCanvasPointX(addonReader.PlayerReader.XCoord)" cy="@botController.RouteInfo.ToCanvasPointY(addonReader.PlayerReader.YCoord)" r="4" fill="@colour" />
                        }

                        <g stroke-width="1" stroke="lightgray">
                            @this.SpiritLines
                        </g>
                        <g fill="gray">
                            @this.SpiritPathPoints
                        </g>

                        <g stroke-width="1" stroke="gray">
                            @this.PathLines
                        </g>
                        <g fill="black">
                            @this.PathPoints
                        </g>

                        <g fill="blue">
                            @((MarkupString)botController.RouteInfo.NextPoint())
                        </g>
                    </g>

                </svg>
            </div>
        </div>
    </div>
</div>
<table>
    <tr>
        <td width="100%">
        </td>
        <td>
        </td>
    </tr>
</table>


<button class="btn btn-primary" @onclick="ToggleBot">Toggle Bot</button>

<div id="tooltip" display="none" style="position: absolute; display: none;"></div>

@code {
    private MarkupString PathLines = new MarkupString();
    private MarkupString PathPoints = new MarkupString();


    private MarkupString SpiritLines = new MarkupString();
    private MarkupString SpiritPathPoints = new MarkupString();

    private bool CanvasInitialised = false;

    protected override void OnInitialized()
    {

        addonReader.AddonDataChanged += (o, e) =>
        {
            base.InvokeAsync(() =>
            {
                try
                {
                    InitialiseRoute();
                    StateHasChanged();
                } catch { }
            });
        };
    }

    private void InitialiseRoute()
    {
        if (!CanvasInitialised && botController.RouteInfo !=null)
        {
            var routeinfo = botController.RouteInfo;

            CanvasInitialised = true;
            routeinfo.SetMargin(20);
            routeinfo.SetCanvasSize(600);
            this.PathLines = new MarkupString(routeinfo.RenderPathLines(routeinfo.PathPoints));
            this.PathPoints = new MarkupString(routeinfo.RenderPathPoints(routeinfo.PathPoints));

            this.SpiritLines = new MarkupString(routeinfo.RenderPathLines(routeinfo.SpiritPath));
            this.SpiritPathPoints = new MarkupString(routeinfo.RenderPathPoints(routeinfo.SpiritPath));
        }
    }

    protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<string>("draw");
        }
    }

    private void ToggleBot()
    {
        botController.ToggleBotStatus();
    }
}

