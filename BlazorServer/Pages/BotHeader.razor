@using Libs;
@inject Libs.WowData wowData
@inject Libs.GOAP.GoapAgent goapAgent
@inject Libs.BotController botController

<table class="table table-bordered">
    <tr>
        <th>Level @playerReader.PlayerLevel (XP: @((int)playerReader.PlayerXpPercentage)%)</th>
        <th>X Coord,Y Coord:</th>
        <th>Bag Items:</th>
        <th>Health:</th>
        <th>Mana/Rage/Energy:</th>
        <th>Target:</th>
        <th>UI Error:</th>
    </tr>
    <tr>
        <td>
            Time to level: @levelTracker.TimeToLevel<br />
            at @levelTracker.PredictedLevelTime.ToString("HH:mm:ss")
        </td>
        <td>@playerReader.XCoord.ToString("0.00"),@playerReader.YCoord.ToString("0.00")</td>
        <td>@wowData.BagReader.BagItems.Count</td>
        <td>@playerReader.HealthPercent %</td>
        <td>@playerReader.ManaCurrent (@playerReader.ManaPercentage %) </td>
        <td>
            <span class="badge @CombatBadge()">@Libs.GOAP.GoapKeyDescription.ToString(Libs.GOAP.GoapKey.incombat, PlayerInCombat)</span>

            @if (!string.IsNullOrEmpty(playerReader.Target))
            {
                <div>
                    @playerReader.Target
                    (@playerReader.TargetLevel)
                    @((int)playerReader.TargetHealthPercentage) %

                    @if (!playerReader.PlayerBitValues.TargetIsNormal)
                    {
                        <div>NOT NORMAL</div>
                    }
                    else if (playerReader.ComboPoints > 0)
                    {
                        <div>Combo Points: @playerReader.ComboPoints</div>
                    }
                </div>
                <div>Potential Adds: @botController.WowBot.PotentialAddsExist</div>
            }
            else
            {
                <div>Kills: @levelTracker.MobsKilled</div>
            }
        </td>
        <td>
            @playerReader.LastUIErrorMessage.ToString()
        </td>
    </tr>
</table>

<table class="table table-sm table-striped">
    @if (goapAgent.CurrentAction != null)
    {
        <GoapActionView action="goapAgent.CurrentAction" IsSelected="true" />
    }
</table>

@code {

    PlayerReader playerReader => wowData.PlayerReader;
    LevelTracker levelTracker => wowData.LevelTracker;

    public bool PlayerInCombat => this.playerReader.PlayerBitValues.PlayerInCombat;

    public string CombatBadge()
    {
        return !PlayerInCombat ? "badge-success" : "badge-danger";
    }

    protected override void OnInitialized()
    {
        wowData.AddonDataChanged += (o, e) =>
        {
            base.InvokeAsync(() => { try { StateHasChanged(); } catch { } });
    };
}
}
