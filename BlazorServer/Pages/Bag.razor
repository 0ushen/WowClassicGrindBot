@page "/Bag"

@inject Libs.AddonReader addonReader
@inject Libs.BotController botController
@inject IJSRuntime JSRuntime;

    <h1>Wowbot - Bag  - @eventTime</h1>

<BotHeader />

<table class="table table-sm table-striped">
    <thead class="thead-light">
        <tr>
            <th>Bag 1</th>
            <th>Bag 2</th>
            <th>Bag 3</th>
            <th>Bag 4</th>
            <th>Bag 5</th>
        </tr>
    </thead>
    @for (int bagIndex = 0; bagIndex < 16; bagIndex++)
    {
        <tr>
            @for (int bag = 0; bag < 5; bag++)
            {
                <td>
                    @{ var bagItem = addonReader.BagReader.BagItems.Where(i => i.Bag == bag).Where(i => i.BagIndex == bagIndex).FirstOrDefault();}
                    @if (bagItem != null)
                    {
                        <a href="https://classic.wowhead.com/item=@bagItem.ItemId" target="_blank" onmousemove="showTooltip(event, '@bagItem.ItemId (@bagItem.Item.ToSellPrice())');" onmouseout="hideTooltip();">
                            @if (bagItem.WasRecentlyUpdated)
                            {
                                <b>
                                    <span style="color:@BagItemColour(bagItem.Item)">
                                        @if (bagItem.Count > 1)
                                        {@bagItem.Count<span>&nbsp;</span>}
                                        @bagItem.Item.Name
                                    </span>
                                    <span class="badge badge-info"> @bagItem.LastChangeDescription </span>
                                </b>

                            }
                            else
                            {
                                <div style="color:@BagItemColour(bagItem.Item)">
                                    <b>@bagItem.Count @bagItem.Item.Name</b>
                                </div>
                            }
                        </a>
                    }
                </td>
            }
        </tr>
    }
</table>

<div id="tooltip" display="none" style="position: absolute; display: none;"></div>

@code {

    string eventTime = "";

    List<string> itemColour = new List<string> { "grey", "black", "green", "blue", "purple", "yellow", "yellow", "yellow" };

    protected string BagItemColour(Libs.Addon.Item item)
    {
        if (item.Quality < 0 || item.Quality > 7) { return "black"; }
        return itemColour[item.Quality];
    }

    List<string> itemBadge = new List<string> { "badge-secondary", "badge-dark", "badge-success", "badge-primary", "badge-warning", "badge-warning", "badge-warning", "badge-warning" };

    protected string BagItemBadge(Libs.Addon.Item item)
    {
        if (item.Quality < 0 || item.Quality > 7) { return "badge-dark"; }
        return itemBadge[item.Quality];
    }

    protected override void OnInitialized()
    {
        addonReader.BagReader.DataChanged += (o, e) =>
        {
            this.eventTime = DateTime.Now.ToString("HH:mm:ss");
            base.InvokeAsync(() => { try { StateHasChanged(); } catch { } });
        };
    }
}